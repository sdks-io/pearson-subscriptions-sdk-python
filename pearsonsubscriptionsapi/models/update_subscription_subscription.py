# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper
from pearsonsubscriptionsapi.models.update_order_order_action import UpdateOrderOrderAction


class UpdateSubscriptionSubscription(object):

    """Implementation of the 'UpdateSubscriptionSubscription' model.

    TODO: type model description here.

    Attributes:
        subscription_number (str): Subscription number or ID. Subscription
            status must be active for the same.
        order_actions (List[UpdateOrderOrderAction]): The actions to be
            applied to the subscription. Order actions will be stored with the
            sequence when it was provided in the request.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "subscription_number": 'subscriptionNumber',
        "order_actions": 'orderActions'
    }

    _optionals = [
        'order_actions',
    ]

    def __init__(self,
                 subscription_number=None,
                 order_actions=APIHelper.SKIP):
        """Constructor for the UpdateSubscriptionSubscription class"""

        # Initialize members of the class
        self.subscription_number = subscription_number 
        if order_actions is not APIHelper.SKIP:
            self.order_actions = order_actions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        subscription_number = dictionary.get("subscriptionNumber") if dictionary.get("subscriptionNumber") else None
        order_actions = None
        if dictionary.get('orderActions') is not None:
            order_actions = [UpdateOrderOrderAction.from_dictionary(x) for x in dictionary.get('orderActions')]
        else:
            order_actions = APIHelper.SKIP
        # Return an object of this model
        return cls(subscription_number,
                   order_actions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'subscription_number={self.subscription_number!r}, '
                f'order_actions={self.order_actions!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'subscription_number={self.subscription_number!s}, '
                f'order_actions={self.order_actions!s})')
