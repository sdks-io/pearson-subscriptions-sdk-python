# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper


class InitialTerm(object):

    """Implementation of the 'InitialTerm' model.

    Information about the first term of the subscription.

    Attributes:
        start_date (str): Start date of the first term, in
            yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        end_date (str): End data of a subscription. in
            yyyy-MM-dd'T'HH:mm:ss.SSSZ.
        period (int): Duration of the first term in months, years, days, or
            weeks, depending on the value of the `periodType` field. Only
            applicable if the value of the `termType` field is `TERMED`.
        period_type (PeriodTypeEnum): Unit of time that the renewal term is
            measured in.
        term_type (TermTypeEnum): Type of the first term. If the value of this
            field is `TERMED`, the first term has a predefined duration based
            on the value of the `period` field. If the value of this field is
            `EVERGREEN`, the first term does not have a predefined duration.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_date": 'startDate',
        "end_date": 'endDate',
        "period": 'period',
        "period_type": 'periodType',
        "term_type": 'termType'
    }

    _optionals = [
        'start_date',
        'end_date',
        'period',
        'period_type',
        'term_type',
    ]

    def __init__(self,
                 start_date=APIHelper.SKIP,
                 end_date=APIHelper.SKIP,
                 period=APIHelper.SKIP,
                 period_type=APIHelper.SKIP,
                 term_type=APIHelper.SKIP):
        """Constructor for the InitialTerm class"""

        # Initialize members of the class
        if start_date is not APIHelper.SKIP:
            self.start_date = start_date 
        if end_date is not APIHelper.SKIP:
            self.end_date = end_date 
        if period is not APIHelper.SKIP:
            self.period = period 
        if period_type is not APIHelper.SKIP:
            self.period_type = period_type 
        if term_type is not APIHelper.SKIP:
            self.term_type = term_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        start_date = dictionary.get("startDate") if dictionary.get("startDate") else APIHelper.SKIP
        end_date = dictionary.get("endDate") if dictionary.get("endDate") else APIHelper.SKIP
        period = dictionary.get("period") if dictionary.get("period") else APIHelper.SKIP
        period_type = dictionary.get("periodType") if dictionary.get("periodType") else APIHelper.SKIP
        term_type = dictionary.get("termType") if dictionary.get("termType") else APIHelper.SKIP
        # Return an object of this model
        return cls(start_date,
                   end_date,
                   period,
                   period_type,
                   term_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'start_date={self.start_date!r}, '
                f'end_date={self.end_date!r}, '
                f'period={self.period!r}, '
                f'period_type={self.period_type!r}, '
                f'term_type={self.term_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'start_date={self.start_date!s}, '
                f'end_date={self.end_date!s}, '
                f'period={self.period!s}, '
                f'period_type={self.period_type!s}, '
                f'term_type={self.term_type!s})')
