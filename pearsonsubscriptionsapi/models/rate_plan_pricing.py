# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper
from pearsonsubscriptionsapi.models.discount import Discount
from pearsonsubscriptionsapi.models.recurring_flat_fee import RecurringFlatFee


class RatePlanPricing(object):

    """Implementation of the 'RatePlanPricing' model.

    TODO: type model description here.

    Attributes:
        discount (Discount): TODO: type description here.
        recurring_flat_fee (RecurringFlatFee): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "discount": 'discount',
        "recurring_flat_fee": 'recurringFlatFee'
    }

    _optionals = [
        'discount',
        'recurring_flat_fee',
    ]

    def __init__(self,
                 discount=APIHelper.SKIP,
                 recurring_flat_fee=APIHelper.SKIP):
        """Constructor for the RatePlanPricing class"""

        # Initialize members of the class
        if discount is not APIHelper.SKIP:
            self.discount = discount 
        if recurring_flat_fee is not APIHelper.SKIP:
            self.recurring_flat_fee = recurring_flat_fee 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        discount = Discount.from_dictionary(dictionary.get('discount')) if 'discount' in dictionary.keys() else APIHelper.SKIP
        recurring_flat_fee = RecurringFlatFee.from_dictionary(dictionary.get('recurringFlatFee')) if 'recurringFlatFee' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(discount,
                   recurring_flat_fee)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'discount={self.discount!r}, '
                f'recurring_flat_fee={self.recurring_flat_fee!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'discount={self.discount!s}, '
                f'recurring_flat_fee={self.recurring_flat_fee!s})')
