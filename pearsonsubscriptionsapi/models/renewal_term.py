# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper


class RenewalTerm(object):

    """Implementation of the 'RenewalTerm' model.

    TODO: type model description here.

    Attributes:
        period (int): Duration of the renewal term in months, years, days, or
            weeks, depending on the value of the `periodType` field.
        period_type (PeriodTypeEnum): Unit of time that the renewal term is
            measured in.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "period": 'period',
        "period_type": 'periodType'
    }

    _optionals = [
        'period',
        'period_type',
    ]

    def __init__(self,
                 period=APIHelper.SKIP,
                 period_type=APIHelper.SKIP):
        """Constructor for the RenewalTerm class"""

        # Initialize members of the class
        if period is not APIHelper.SKIP:
            self.period = period 
        if period_type is not APIHelper.SKIP:
            self.period_type = period_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        period = dictionary.get("period") if dictionary.get("period") else APIHelper.SKIP
        period_type = dictionary.get("periodType") if dictionary.get("periodType") else APIHelper.SKIP
        # Return an object of this model
        return cls(period,
                   period_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'period={self.period!r}, '
                f'period_type={self.period_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'period={self.period!s}, '
                f'period_type={self.period_type!s})')
