# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper
from pearsonsubscriptionsapi.models.add_product import AddProduct
from pearsonsubscriptionsapi.models.remove_product import RemoveProduct
from pearsonsubscriptionsapi.models.terms_and_conditions import TermsAndConditions
from pearsonsubscriptionsapi.models.trigger_date import TriggerDate


class UpdateOrderOrderAction(object):

    """Implementation of the 'UpdateOrderOrderAction' model.

    TODO: type model description here.

    Attributes:
        trigger_dates (List[TriggerDate]): TODO: type description here.
        add_product (AddProduct): Information about an order action of type
            `addProduct`.   If you want to create a pending order through the
            "Add product" order action, and if the charge's trigger condition
            is `Specific Date`, you must set a charge number in the
            `chargeNumber` field for the "Add product" order action.
        remove_product (RemoveProduct): Remove product details from the
            subscription plan
        terms_and_conditions (TermsAndConditions): change the terms and
            conditions of a subscription .

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_dates": 'triggerDates',
        "add_product": 'addProduct',
        "remove_product": 'removeProduct',
        "terms_and_conditions": 'termsAndConditions'
    }

    _optionals = [
        'trigger_dates',
        'add_product',
        'remove_product',
        'terms_and_conditions',
    ]

    def __init__(self,
                 trigger_dates=APIHelper.SKIP,
                 add_product=APIHelper.SKIP,
                 remove_product=APIHelper.SKIP,
                 terms_and_conditions=APIHelper.SKIP):
        """Constructor for the UpdateOrderOrderAction class"""

        # Initialize members of the class
        if trigger_dates is not APIHelper.SKIP:
            self.trigger_dates = trigger_dates 
        if add_product is not APIHelper.SKIP:
            self.add_product = add_product 
        if remove_product is not APIHelper.SKIP:
            self.remove_product = remove_product 
        if terms_and_conditions is not APIHelper.SKIP:
            self.terms_and_conditions = terms_and_conditions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_dates = None
        if dictionary.get('triggerDates') is not None:
            trigger_dates = [TriggerDate.from_dictionary(x) for x in dictionary.get('triggerDates')]
        else:
            trigger_dates = APIHelper.SKIP
        add_product = AddProduct.from_dictionary(dictionary.get('addProduct')) if 'addProduct' in dictionary.keys() else APIHelper.SKIP
        remove_product = RemoveProduct.from_dictionary(dictionary.get('removeProduct')) if 'removeProduct' in dictionary.keys() else APIHelper.SKIP
        terms_and_conditions = TermsAndConditions.from_dictionary(dictionary.get('termsAndConditions')) if 'termsAndConditions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_dates,
                   add_product,
                   remove_product,
                   terms_and_conditions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_dates={self.trigger_dates!r}, '
                f'add_product={self.add_product!r}, '
                f'remove_product={self.remove_product!r}, '
                f'terms_and_conditions={self.terms_and_conditions!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_dates={self.trigger_dates!s}, '
                f'add_product={self.add_product!s}, '
                f'remove_product={self.remove_product!s}, '
                f'terms_and_conditions={self.terms_and_conditions!s})')
