# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pearsonsubscriptionsapi.api_helper import APIHelper
from pearsonsubscriptionsapi.models.account import Account
from pearsonsubscriptionsapi.models.custom_field import CustomField
from pearsonsubscriptionsapi.models.product import Product
from pearsonsubscriptionsapi.models.update_subscription_processing_options import UpdateSubscriptionProcessingOptions
from pearsonsubscriptionsapi.models.update_subscription_subscription import UpdateSubscriptionSubscription


class UpdateSubscription(object):

    """Implementation of the 'UpdateSubscription' model.

    TODO: type model description here.

    Attributes:
        order_type (OrderTypeEnum): Order Type .
        order_number (str): Hybris Order Number.
        order_date (str): The date when the order is signed. All the order
            actions under this order will use this order date as the contract
            effective date if the contract effective date field is skipped or
            its value is left as null.
        description (str): A description of the order.
        existing_account_number (str): The account number that this order will
            be created under. It can be either the accountNumber or the
            account info provided.
        account (Account): TODO: type description here.
        update_subscription_subscriptions
            (List[UpdateSubscriptionSubscription]): Each item includes a set
            of order actions, which will be applied to the same base
            subscription.
        update_subscription_processing_options
            (UpdateSubscriptionProcessingOptions): Invoice or Payment.
        update_subscription_products (List[Product]): TODO: type description
            here.
        custom_fields (List[CustomField]): Information about the payment
            related fields.
        payment_capture (object): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "order_type": 'orderType',
        "order_number": 'orderNumber',
        "order_date": 'orderDate',
        "description": 'description',
        "existing_account_number": 'existingAccountNumber',
        "account": 'account',
        "update_subscription_subscriptions": 'updateSubscriptionSubscriptions',
        "update_subscription_processing_options": 'updateSubscriptionProcessingOptions',
        "update_subscription_products": 'updateSubscriptionProducts',
        "custom_fields": 'customFields',
        "payment_capture": 'paymentCapture'
    }

    _optionals = [
        'order_number',
        'order_date',
        'description',
        'existing_account_number',
        'account',
        'update_subscription_subscriptions',
        'update_subscription_processing_options',
        'update_subscription_products',
        'custom_fields',
        'payment_capture',
    ]

    def __init__(self,
                 order_type=None,
                 order_number=APIHelper.SKIP,
                 order_date=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 existing_account_number=APIHelper.SKIP,
                 account=APIHelper.SKIP,
                 update_subscription_subscriptions=APIHelper.SKIP,
                 update_subscription_processing_options=APIHelper.SKIP,
                 update_subscription_products=APIHelper.SKIP,
                 custom_fields=APIHelper.SKIP,
                 payment_capture=APIHelper.SKIP):
        """Constructor for the UpdateSubscription class"""

        # Initialize members of the class
        self.order_type = order_type 
        if order_number is not APIHelper.SKIP:
            self.order_number = order_number 
        if order_date is not APIHelper.SKIP:
            self.order_date = order_date 
        if description is not APIHelper.SKIP:
            self.description = description 
        if existing_account_number is not APIHelper.SKIP:
            self.existing_account_number = existing_account_number 
        if account is not APIHelper.SKIP:
            self.account = account 
        if update_subscription_subscriptions is not APIHelper.SKIP:
            self.update_subscription_subscriptions = update_subscription_subscriptions 
        if update_subscription_processing_options is not APIHelper.SKIP:
            self.update_subscription_processing_options = update_subscription_processing_options 
        if update_subscription_products is not APIHelper.SKIP:
            self.update_subscription_products = update_subscription_products 
        if custom_fields is not APIHelper.SKIP:
            self.custom_fields = custom_fields 
        if payment_capture is not APIHelper.SKIP:
            self.payment_capture = payment_capture 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        order_type = dictionary.get("orderType") if dictionary.get("orderType") else None
        order_number = dictionary.get("orderNumber") if dictionary.get("orderNumber") else APIHelper.SKIP
        order_date = dictionary.get("orderDate") if dictionary.get("orderDate") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        existing_account_number = dictionary.get("existingAccountNumber") if dictionary.get("existingAccountNumber") else APIHelper.SKIP
        account = Account.from_dictionary(dictionary.get('account')) if 'account' in dictionary.keys() else APIHelper.SKIP
        update_subscription_subscriptions = None
        if dictionary.get('updateSubscriptionSubscriptions') is not None:
            update_subscription_subscriptions = [UpdateSubscriptionSubscription.from_dictionary(x) for x in dictionary.get('updateSubscriptionSubscriptions')]
        else:
            update_subscription_subscriptions = APIHelper.SKIP
        update_subscription_processing_options = UpdateSubscriptionProcessingOptions.from_dictionary(dictionary.get('updateSubscriptionProcessingOptions')) if 'updateSubscriptionProcessingOptions' in dictionary.keys() else APIHelper.SKIP
        update_subscription_products = None
        if dictionary.get('updateSubscriptionProducts') is not None:
            update_subscription_products = [Product.from_dictionary(x) for x in dictionary.get('updateSubscriptionProducts')]
        else:
            update_subscription_products = APIHelper.SKIP
        custom_fields = None
        if dictionary.get('customFields') is not None:
            custom_fields = [CustomField.from_dictionary(x) for x in dictionary.get('customFields')]
        else:
            custom_fields = APIHelper.SKIP
        payment_capture = dictionary.get("paymentCapture") if dictionary.get("paymentCapture") else APIHelper.SKIP
        # Return an object of this model
        return cls(order_type,
                   order_number,
                   order_date,
                   description,
                   existing_account_number,
                   account,
                   update_subscription_subscriptions,
                   update_subscription_processing_options,
                   update_subscription_products,
                   custom_fields,
                   payment_capture)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'order_type={self.order_type!r}, '
                f'order_number={self.order_number!r}, '
                f'order_date={self.order_date!r}, '
                f'description={self.description!r}, '
                f'existing_account_number={self.existing_account_number!r}, '
                f'account={self.account!r}, '
                f'update_subscription_subscriptions={self.update_subscription_subscriptions!r}, '
                f'update_subscription_processing_options={self.update_subscription_processing_options!r}, '
                f'update_subscription_products={self.update_subscription_products!r}, '
                f'custom_fields={self.custom_fields!r}, '
                f'payment_capture={self.payment_capture!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'order_type={self.order_type!s}, '
                f'order_number={self.order_number!s}, '
                f'order_date={self.order_date!s}, '
                f'description={self.description!s}, '
                f'existing_account_number={self.existing_account_number!s}, '
                f'account={self.account!s}, '
                f'update_subscription_subscriptions={self.update_subscription_subscriptions!s}, '
                f'update_subscription_processing_options={self.update_subscription_processing_options!s}, '
                f'update_subscription_products={self.update_subscription_products!s}, '
                f'custom_fields={self.custom_fields!s}, '
                f'payment_capture={self.payment_capture!s})')
