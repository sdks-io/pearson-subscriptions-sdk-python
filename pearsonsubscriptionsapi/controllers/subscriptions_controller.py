# -*- coding: utf-8 -*-

"""
pearsonsubscriptionsapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pearsonsubscriptionsapi.api_helper import APIHelper
from pearsonsubscriptionsapi.configuration import Server
from pearsonsubscriptionsapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pearsonsubscriptionsapi.http.http_method_enum import HttpMethodEnum
from pearsonsubscriptionsapi.models.order_resp_type import OrderRespType
from pearsonsubscriptionsapi.models.cancel_res_type import CancelResType
from pearsonsubscriptionsapi.exceptions.invalid_req_type_exception import InvalidReqTypeException
from pearsonsubscriptionsapi.exceptions.auth_error_type_exception import AuthErrorTypeException
from pearsonsubscriptionsapi.exceptions.order_resp_type_error_exception import OrderRespTypeErrorException
from pearsonsubscriptionsapi.exceptions.order_error_type_exception import OrderErrorTypeException


class SubscriptionsController(BaseController):

    """A Controller to access Endpoints in the pearsonsubscriptionsapi API."""
    def __init__(self, config):
        super(SubscriptionsController, self).__init__(config)

    def aggregate_subscription(self,
                               x_user_id,
                               x_authorization,
                               body,
                               x_transaction_id=None):
        """Does a POST request to /v1/mojo/aggregate-subscription.

        TODO: type endpoint description here.

        Args:
            x_user_id (str): UserId of an user who bought a subscription. This
                will be an IES userId
            x_authorization (str): This will be an IES system token
            body (OrderRequestType): Data
            x_transaction_id (str, optional): Unique ID for a transaction

        Returns:
            OrderRespType: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/mojo/aggregate-subscription')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('X-UserId')
                          .value(x_user_id))
            .header_param(Parameter()
                          .key('X-Authorization')
                          .value(x_authorization))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-TransactionId')
                          .value(x_transaction_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrderRespType.from_dictionary)
            .local_error('400', 'Bad Request', InvalidReqTypeException)
            .local_error('401', 'Unauthorized', AuthErrorTypeException)
            .local_error('500', 'Error', OrderRespTypeErrorException)
        ).execute()

    def update_subscription(self,
                            x_user_id,
                            x_authorization,
                            body,
                            x_transaction_id=None):
        """Does a PUT request to /v1/mojo/aggregate-subscription.

        TODO: type endpoint description here.

        Args:
            x_user_id (str): UserId of an user who bought a subscription. This
                will be an IES userId
            x_authorization (str): This will be an IES system token
            body (UpdateSubscription): Data
            x_transaction_id (str, optional): Unique ID for a transaction

        Returns:
            OrderRespType: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/mojo/aggregate-subscription')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('X-UserId')
                          .value(x_user_id))
            .header_param(Parameter()
                          .key('X-Authorization')
                          .value(x_authorization))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-TransactionId')
                          .value(x_transaction_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrderRespType.from_dictionary)
            .local_error('400', 'Bad Request', InvalidReqTypeException)
            .local_error('401', 'Unauthorized', AuthErrorTypeException)
            .local_error('500', 'Error', OrderErrorTypeException)
        ).execute()

    def cancel_subscription(self,
                            user_id,
                            x_authorization,
                            body,
                            x_transaction_id=None,
                            origin=None):
        """Does a PUT request to /v1/subscriptions/cancel.

        Cancel subscription for a given subscription ID

        Args:
            user_id (str): UserId of an user who bought a subscription. This
                will be an IES userId
            x_authorization (str): This will be an IES system token
            body (CancelReqType): Data
            x_transaction_id (str, optional): Unique ID for a transaction
            origin (str, optional): Originating System

        Returns:
            CancelResType: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/subscriptions/cancel')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('userId')
                          .value(user_id))
            .header_param(Parameter()
                          .key('X-Authorization')
                          .value(x_authorization))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-TransactionId')
                          .value(x_transaction_id))
            .header_param(Parameter()
                          .key('origin')
                          .value(origin))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancelResType.from_dictionary)
            .local_error('400', 'Bad Request', InvalidReqTypeException)
            .local_error('401', 'Unauthorized', AuthErrorTypeException)
            .local_error('500', 'Error', OrderErrorTypeException)
        ).execute()

    def expire_subscriptions(self):
        """Does a GET request to /v1/subscriptions/expiry.

        Expire subscription for all past enddate internal and IA subscriptions

        Returns:
            CancelResType: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/subscriptions/expiry')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancelResType.from_dictionary)
            .local_error('400', 'Bad Request', InvalidReqTypeException)
            .local_error('401', 'Unauthorized', AuthErrorTypeException)
            .local_error('500', 'Error', OrderErrorTypeException)
        ).execute()
