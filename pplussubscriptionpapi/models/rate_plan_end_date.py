# -*- coding: utf-8 -*-

"""
pplussubscriptionpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from pplussubscriptionpapi.api_helper import APIHelper


class RatePlanEndDate(object):

    """Implementation of the 'RatePlanEndDate' model.

    TODO: type model description here.

    Attributes:
        end_date_condition (EndDateConditionEnum): enum values are
            "Subscription_End" "Fixed_Period" "Specific_End_Date"
        specific_end_date (date): TODO: type description here.
        up_to_periods (float): Duration of the charge in billing periods,
            days, weeks, months, or years, depending on the value of the
            upToPeriodsType field. Only applicable if the value of the
            endDateCondition field is Fixed_Period.
        up_to_periods_type (UpToPeriodsTypeEnum): Unit of time that the charge
            duration is measured in. Only applicable if the value of the
            endDateCondition field is Fixed_Period.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "end_date_condition": 'endDateCondition',
        "specific_end_date": 'specificEndDate',
        "up_to_periods": 'upToPeriods',
        "up_to_periods_type": 'upToPeriodsType'
    }

    _optionals = [
        'end_date_condition',
        'specific_end_date',
        'up_to_periods',
        'up_to_periods_type',
    ]

    def __init__(self,
                 end_date_condition=APIHelper.SKIP,
                 specific_end_date=APIHelper.SKIP,
                 up_to_periods=APIHelper.SKIP,
                 up_to_periods_type=APIHelper.SKIP):
        """Constructor for the RatePlanEndDate class"""

        # Initialize members of the class
        if end_date_condition is not APIHelper.SKIP:
            self.end_date_condition = end_date_condition 
        if specific_end_date is not APIHelper.SKIP:
            self.specific_end_date = specific_end_date 
        if up_to_periods is not APIHelper.SKIP:
            self.up_to_periods = up_to_periods 
        if up_to_periods_type is not APIHelper.SKIP:
            self.up_to_periods_type = up_to_periods_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        end_date_condition = dictionary.get("endDateCondition") if dictionary.get("endDateCondition") else APIHelper.SKIP
        specific_end_date = dateutil.parser.parse(dictionary.get('specificEndDate')).date() if dictionary.get('specificEndDate') else APIHelper.SKIP
        up_to_periods = dictionary.get("upToPeriods") if dictionary.get("upToPeriods") else APIHelper.SKIP
        up_to_periods_type = dictionary.get("upToPeriodsType") if dictionary.get("upToPeriodsType") else APIHelper.SKIP
        # Return an object of this model
        return cls(end_date_condition,
                   specific_end_date,
                   up_to_periods,
                   up_to_periods_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'end_date_condition={self.end_date_condition!r}, '
                f'specific_end_date={self.specific_end_date!r}, '
                f'up_to_periods={self.up_to_periods!r}, '
                f'up_to_periods_type={self.up_to_periods_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'end_date_condition={self.end_date_condition!s}, '
                f'specific_end_date={self.specific_end_date!s}, '
                f'up_to_periods={self.up_to_periods!s}, '
                f'up_to_periods_type={self.up_to_periods_type!s})')
