# -*- coding: utf-8 -*-

"""
pplussubscriptionpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pplussubscriptionpapi.api_helper import APIHelper
from pplussubscriptionpapi.models.subscribe_to_rate_plan import SubscribeToRatePlan
from pplussubscriptionpapi.models.terms import Terms


class CreateSubscription(object):

    """Implementation of the 'createSubscription' model.

    Information about an order action of type `CreateSubscription`.

    Attributes:
        terms (Terms): Container for the terms and renewal settings of the
            subscription.
        subscribe_to_rate_plans (List[SubscribeToRatePlan]): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "terms": 'terms',
        "subscribe_to_rate_plans": 'subscribeToRatePlans'
    }

    _optionals = [
        'terms',
        'subscribe_to_rate_plans',
    ]

    def __init__(self,
                 terms=APIHelper.SKIP,
                 subscribe_to_rate_plans=APIHelper.SKIP):
        """Constructor for the CreateSubscription class"""

        # Initialize members of the class
        if terms is not APIHelper.SKIP:
            self.terms = terms 
        if subscribe_to_rate_plans is not APIHelper.SKIP:
            self.subscribe_to_rate_plans = subscribe_to_rate_plans 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        terms = Terms.from_dictionary(dictionary.get('terms')) if 'terms' in dictionary.keys() else APIHelper.SKIP
        subscribe_to_rate_plans = None
        if dictionary.get('subscribeToRatePlans') is not None:
            subscribe_to_rate_plans = [SubscribeToRatePlan.from_dictionary(x) for x in dictionary.get('subscribeToRatePlans')]
        else:
            subscribe_to_rate_plans = APIHelper.SKIP
        # Return an object of this model
        return cls(terms,
                   subscribe_to_rate_plans)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'terms={self.terms!r}, '
                f'subscribe_to_rate_plans={self.subscribe_to_rate_plans!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'terms={self.terms!s}, '
                f'subscribe_to_rate_plans={self.subscribe_to_rate_plans!s})')
