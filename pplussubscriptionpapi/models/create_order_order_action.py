# -*- coding: utf-8 -*-

"""
pplussubscriptionpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pplussubscriptionpapi.api_helper import APIHelper
from pplussubscriptionpapi.models.create_subscription import CreateSubscription
from pplussubscriptionpapi.models.trigger_date import TriggerDate


class CreateOrderOrderAction(object):

    """Implementation of the 'CreateOrderOrderAction' model.

    TODO: type model description here.

    Attributes:
        mtype (TypeEnum): TODO: type description here.
        trigger_dates (List[TriggerDate]): TODO: type description here.
        create_subscription (CreateSubscription): Information about an order
            action of type `CreateSubscription`.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "trigger_dates": 'triggerDates',
        "create_subscription": 'createSubscription'
    }

    _optionals = [
        'mtype',
        'trigger_dates',
        'create_subscription',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 trigger_dates=APIHelper.SKIP,
                 create_subscription=APIHelper.SKIP):
        """Constructor for the CreateOrderOrderAction class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if trigger_dates is not APIHelper.SKIP:
            self.trigger_dates = trigger_dates 
        if create_subscription is not APIHelper.SKIP:
            self.create_subscription = create_subscription 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        trigger_dates = None
        if dictionary.get('triggerDates') is not None:
            trigger_dates = [TriggerDate.from_dictionary(x) for x in dictionary.get('triggerDates')]
        else:
            trigger_dates = APIHelper.SKIP
        create_subscription = CreateSubscription.from_dictionary(dictionary.get('createSubscription')) if 'createSubscription' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   trigger_dates,
                   create_subscription)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'trigger_dates={self.trigger_dates!r}, '
                f'create_subscription={self.create_subscription!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'trigger_dates={self.trigger_dates!s}, '
                f'create_subscription={self.create_subscription!s})')
